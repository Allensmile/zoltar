{"docs":[{"location":"/index.html","text":"","title":"Zoltar"},{"location":"/index.html#zoltar","text":"Common library for serving TensorFlow and XGBoost models in production.\nZoltar is a library that helps load predictive machine learning models in a JVM. It provides several key abstractions which you can implement to help your service load a serialized model, featurize input data, submit feature vectors to the model, and serve the model’s predictions. Below is a quick overview of these abstractions which can be found in zoltar-core.","title":"Zoltar"},{"location":"/index.html#features","text":"TensorFlow model loading and prediction. XGBoost model loading and prediction. Filesystems: Local Google Cloud Storage Featran featurization library integration. Easy integration with Apollo services.","title":"Features"},{"location":"/index.html#abstractions","text":"Predictor: The core functionality of Zoltar. This object loads a model and calls functions to featurize input vectors and submit them for prediction. To these ends, a predictor is composed of a ModelLoader, FeatureExtractor, and PredictFn.\nPredictFn: A function that submits a feature vector to a model for prediction.\nPrediction: A wrapper around a single feature vector and its predicted output.\nModelLoader: An object that loads an XGBoost or TensorFlow model from a supported filesystem.\nModel: The Java object that houses the predictive model itself.\nFeatureExtractor: Takes an input vector and applies a FeatureExtractFn to it.\nFeatureExtractFn: A function that takes a raw input vector and extracts a feature vector from it.\nFor more details, take a look at the source code and follow the documentation in the comments. If you’re using TensorFlow or XGBoost, you can find model specific implementations of these abstractions in zoltar-tensorflow and zoltar-xgboost respectively.\nWe’ve also provided an example service built on the Apollo framework. It demonstrates how Zoltar components are implemented and organized. We highly recommend you walk through this example before you try integrating Zoltar into your applications.","title":"Abstractions"},{"location":"/getting-started.html","text":"","title":"Getting Started"},{"location":"/getting-started.html#getting-started","text":"To start using Zoltar you need to add this dependency to your project.\nMaven <dependency>\n  <groupId>com.spotify</groupId>\n  <artifactId>zoltar-api</artifactId>\n  <version>0.4.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.spotify', name: 'zoltar-api', version: '0.4.0'\n} sbt libraryDependencies += \"com.spotify\" % \"zoltar-api\" % \"0.4.0\"\nUsing Maven? You might want to include as it might help you resolve some dependency conflicts. Maven <dependency>\n  <groupId>com.spotify</groupId>\n  <artifactId>zoltar-bom</artifactId>\n  <version>0.5.1-SNAPSHOT</version>\n  <type>pom</type>\n  <scope>import</scope>\n</dependency>\nSee Modules for extra integrations.","title":"Getting Started"},{"location":"/modules/index.html","text":"","title":"Modules"},{"location":"/modules/index.html#modules","text":"TensorFlow XGBoost Featran Metrics Getting Started Example Google Cloud ML Engine Getting started Usage Example","title":"Modules"},{"location":"/modules/tensorflow.html","text":"","title":"TensorFlow"},{"location":"/modules/tensorflow.html#tensorflow","text":"TensorFlow dependency is not included by default. To use it you need to include an extra dependency.\nMaven <dependency>\n  <groupId>com.spotify</groupId>\n  <artifactId>zoltar-tensorflow</artifactId>\n  <version>0.4.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.spotify', name: 'zoltar-tensorflow', version: '0.4.0'\n} sbt libraryDependencies += \"com.spotify\" % \"zoltar-tensorflow\" % \"0.4.0\"","title":"TensorFlow"},{"location":"/modules/xgboost.html","text":"","title":"XGBoost"},{"location":"/modules/xgboost.html#xgboost","text":"XGBoost dependency is not included by default. To use it you need to include an extra dependency.\nMaven <dependency>\n  <groupId>com.spotify</groupId>\n  <artifactId>zoltar-xgboost</artifactId>\n  <version>0.4.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.spotify', name: 'zoltar-xgboost', version: '0.4.0'\n} sbt libraryDependencies += \"com.spotify\" % \"zoltar-xgboost\" % \"0.4.0\"","title":"XGBoost"},{"location":"/modules/featran.html","text":"","title":"Featran"},{"location":"/modules/featran.html#featran","text":"Featran dependency is not included by default. To use it you need to include an extra dependency.\nMaven <dependency>\n  <groupId>com.spotify</groupId>\n  <artifactId>zoltar-featran</artifactId>\n  <version>0.4.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.spotify', name: 'zoltar-featran', version: '0.4.0'\n} sbt libraryDependencies += \"com.spotify\" % \"zoltar-featran\" % \"0.4.0\"","title":"Featran"},{"location":"/modules/metrics.html","text":"","title":"Metrics"},{"location":"/modules/metrics.html#metrics","text":"Zoltar provides a way to attach and extend metrics around Predictor.\nzoltar-metrics takes advantage of the semantic-metrics to be able to capture meaningful metrics.","title":"Metrics"},{"location":"/modules/metrics.html#getting-started","text":"Add zoltar-metrics dependency to your project:\nMaven <dependency>\n  <groupId>com.spotify</groupId>\n  <artifactId>zoltar-metrics</artifactId>\n  <version>0.4.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.spotify', name: 'zoltar-metrics', version: '0.4.0'\n} sbt libraryDependencies += \"com.spotify\" % \"zoltar-metrics\" % \"0.4.0\"\nCreate a semantic registry:\nfinal SemanticMetricRegistry registry = new SemanticMetricRegistry();\nfinal MetricId metricId = MetricId.build().tagged(\"service\", \"my-application\");\nAttach it to the PredictorBuilder:\nfinal PredictorMetrics<Integer, Float, Float> predictorMetrics =\n    SemanticPredictorMetrics.create(metricRegistry, metricId);\nPredictors\n    .newBuilder(modelLoader, featureExtractor, predictFn, predictorMetrics)","title":"Getting Started"},{"location":"/modules/metrics.html#example","text":"Follow this example to see how you can create new set of metrics and attach them.","title":"Example"},{"location":"/modules/mlengine.html","text":"","title":"Google Cloud ML Engine"},{"location":"/modules/mlengine.html#google-cloud-ml-engine","text":"","title":"Google Cloud ML Engine"},{"location":"/modules/mlengine.html#getting-started","text":"To use Google Cloud ML Engine, you need to deploy your model first! Deployment might depend on the type of model you are using:\nTensorFlow. scikit-learn or XGBoost.","title":"Getting started"},{"location":"/modules/mlengine.html#usage","text":"Include the following dependency:\nMaven <dependency>\n  <groupId>com.spotify</groupId>\n  <artifactId>zoltar-mlengine</artifactId>\n  <version>0.4.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.spotify', name: 'zoltar-mlengine', version: '0.4.0'\n} sbt libraryDependencies += \"com.spotify\" % \"zoltar-mlengine\" % \"0.4.0\"\nReplace your existing ModelLoader with MlEngineLoader\nfinal MlEngineLoader mlEngineLoader =\n    Models.mlEngine(projectId, modelId, versionId);","title":"Usage"},{"location":"/modules/mlengine.html#example","text":"Follow this example to create a Predictor that uses Google Cloud ML Engine deployed models.","title":"Example"},{"location":"/release.html","text":"","title":"Release Instructions"},{"location":"/release.html#release-instructions","text":"These instructions are based on the instructions for deploying to the Central Repository using Maven.\nNote: this section only applies for internal Spotify developers.\nYou will need the following: - Sign up for a Sonatype account here - Ask for permissions to push to com.spotify domain like in this ticket - GPG set up on the machine you’re deploying from\nOnce you’ve got that in place, you should be able to do deployment using the following commands:\n# setup credentials\nexport SONATYPE_USERNAME=<your Sonatype username>\nexport SONATYPE_PASSWORD=<your Sonatype password>\n\n# deploy snapshot version\nmvn clean deploy --settings settings.xml # -Prelease to test signing\n\n# make and deploy a release\nmvn release:clean release:prepare release:perform --settings settings.xml\nThen update https://github.com/spotify/zoltar/releases with release notes!","title":"Release Instructions"},{"location":"/license.html","text":"","title":"License"},{"location":"/license.html#license","text":"Copyright 2018 Spotify AB.\nLicensed under the Apache License, Version 2.0: http://www.apache.org/licenses/LICENSE-2.0","title":"License"},{"location":"/javadoc.html","text":"","title":""}]}